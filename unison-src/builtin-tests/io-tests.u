
io.tests = Tests.main do
    !test_getFileSize
    !test_getFileSize_err
    !test_getFileTimestamp
    !test_getFileTimestamp_err
    !io.test.seek.absolute
    !io.test.seek.relative
    !io.test.getLine
    !io.test.getsetBuffering
    !io.test_getEcho
    !io.test_getArgs
    !io.test_getEnv
    !io.test.getRandomBytes
    !io.test_getSomeBytes
    !io.test_getChar
    !io.test_getCurrentDirectory
    !io.test_createTempDirectory
    !io.test_renameFile
    !io.test_isFileOpen
    !io.test_ready
    !io.test_now
    !io.test_isSeekable
    !io.test_handlePosition
    !io.test_renameDirectory
    !io.test_setCurrentDirectory

rm_if_exists fp =
    if FilePath.exists fp
        then
            if isDirectory fp then
                removeDirectory fp
            else
                removeFile fp
        else
            ()


testFile = do
    fp = FilePath ((FilePath.toText !getTempDirectory) ++ "/unison-test")
    rm_if_exists fp
    fp

io.test_isSeekable = do
    fp = !testFile
    fhandle = open fp Write
    checkEqual "isSeekable file" true (isSeekable fhandle)

io.test_handlePosition = do
    fp = !testFile
    writeFile fp "123456"
    fhandle = open fp Read
    checkEqual "handlePosition initial" 0 (position fhandle)
    _ = getBytes fhandle 2
    checkEqual "handlePosition" 2 (position fhandle)


io.test_deprecated_systemTimeMicroseconds = do
    match !systemTimeMicroseconds with
        micro ->
            if micro Int.> +10 then
                Tests.pass "!systemTimeMicroseconds"
            else
                Tests.fail "!systemTimeMicroseconds" "systemTime is too small"

io.test_deprecated_systemTime = do
    match !systemTime with
        EpochTime seconds ->
            if seconds > 10 then
                Tests.pass "!systemTime"
            else
                Tests.fail "!systemTime" "systemTime is too small"

io.test_now = do
    match !now with
        Instant a b ->
            if a Int.> +10 then
                Tests.pass "!now"
            else
                Tests.fail "!now" "now is too small"


io.test_createTempDirectory = do
    tmp = (createTempDirectory (FilePath "prefix-"))
    match tmp with
        FilePath text -> if Text.contains "/prefix-" text then
            if exists tmp then
                removeDirectory tmp
                Tests.pass "Tmp directory exists and contains prefix-"
            else
                Tests.fail "Tmp directory doesn't exist" text
        else
            Tests.fail "Tmp directory doesn't contain prefix-" text

io.test_isFileOpen = do
    fp = FilePath ((FilePath.toText !getTempDirectory) ++ "/unison-test")
    fhandle = open fp Write
    open1 = isOpen fhandle
    Handle.close fhandle
    open2 = isOpen fhandle
    rm_if_exists fp
    checkEqual "opened handle is open" open1 true
    checkEqual "closed handle is not open" open2 false

io.test_ready = do
    fp = !testFile
    _ = writeFile fp "What"
    fhandle = open fp Read
    ready1 = ready fhandle
    checkEqual "handle with text ready is ready" ready1 true

join fp text =
    FilePath (FilePath.toText fp ++ "/" ++ text)

io.test_renameDirectory = do
    td = join !getTempDirectory "unison-dir"
    rd = join !getTempDirectory "unison-dir-rename"
    rm_if_exists td
    rm_if_exists rd
    createDirectory td
    contents = "a file contents"
    _ = writeFile (join td "hello") contents
    renameDirectory td rd
    got = (getText (open (join rd "hello") Read))
    rm_if_exists td
    rm_if_exists rd
    checkEqual "renameFile" contents got

io.test_renameFile = do
    fp = FilePath ((FilePath.toText !getTempDirectory) ++ "/unison-test")
    rmp = FilePath ((FilePath.toText !getTempDirectory) ++ "/unison-test-renamed")
    rm_if_exists fp
    rm_if_exists rmp
    contents = "a file contents"
    _ = writeFile fp contents
    renameFile fp rmp
    got = (getText (open rmp Read))
    rm_if_exists fp
    rm_if_exists rmp
    checkEqual "renameFile" contents got

writeFile fp txt =
    fh = open fp Write
    putText fh txt
    close fh

test_getFileSize = do
    fp = !testFile
    _ = writeFile fp "What"
    fs = (FilePath.getSize fp)
    checkEqual "Get file size should work" fs 4
    removeFile fp

test_getFileSize_err = do
    expectError' "File size of missing file" ["does not exist", "cannot get size"] '(FilePath.getSize !testFile)

test_getFileTimestamp = do
    time = secondsSinceEpoch !now
    fp = !testFile
    _ = writeFile fp "What"
    ts = match FilePath.getTimestamp fp with Instant i _ -> i
    after = secondsSinceEpoch !now
    use Int - +
    -- allow slip of up to a second
    if ts < (time - +1) then
        Tests.fail "File timestamp is too early" ((Int.toText ts) ++ " vs " ++ (Int.toText after))
    else if ts > (after + +1) then
        Tests.fail "File timestamp is too late" ((Int.toText ts) ++ " vs " ++ (Int.toText after))
    else
        Tests.pass "File timestamp is reasonable"

test_getFileTimestamp_err = do
    expectError' "File timestamp of missing file" ["does not exist", "error getting"] '(FilePath.getTimestamp !testFile)

io.test_setCurrentDirectory = do
    prev = !getCurrentDirectory
    setCurrentDirectory (FilePath "/")
    new = !getCurrentDirectory
    setCurrentDirectory prev
    match new with
        FilePath text -> checkEqual "Current directory set & get" "/" text

io.test_getCurrentDirectory = do
    match !getCurrentDirectory with
        FilePath text -> if Text.startsWith "/" text then
            Tests.pass "Current directory starts with /"
        else
            Tests.fail "Current directory doesn't start with /" text

seekFile = do
    fp = !testFile
    _ = writeFile fp "0123456789"
    open fp Read

io.test.seek.absolute = do
    h = !seekFile
    seek h AbsoluteSeek +4
    seek h AbsoluteSeek +2
    got = getText h
    checkEqual "AbsoluteSeek" got "23456789"

io.test.seek.relative = do
    h = !seekFile
    seek h AbsoluteSeek +2
    seek h RelativeSeek +2
    got = getText h
    checkEqual "RelativeSeek" got "456789"
    seek h RelativeSeek -2
    got2 = getText h
    checkEqual "RelativeSeek" got2 "89"

io.test.seek.fromEnd = do
    h = !seekFile
    seek h SeekFromEnd -6
    seek h SeekFromEnd -4
    got = getText h
    checkEqual "SeekFromEnd" got "6789"

io.test.getLine = do
    fp = !testFile
    _ = writeFile fp "one\ntwo\nthree"
    h = open fp Read
    one = Handle.getLine h
    two = Handle.getLine h
    three = Handle.getLine h
    checkEqual "getLine 1" one "one"
    checkEqual "getLine 2" two "two"
    checkEqual "getLine 3" three "three"

io.test.getsetBuffering = do
    prev = getBuffering stdOut
    setBuffering stdOut BlockBuffering
    bf = getBuffering stdOut
    setBuffering stdOut LineBuffering
    b2 = getBuffering stdOut
    setBuffering stdOut NoBuffering
    b3 = getBuffering stdOut
    setBuffering stdOut prev
    checkEqual "Block" bf BlockBuffering
    checkEqual "Line" b2 LineBuffering
    checkEqual "No" b3 NoBuffering

is_a_tty = do
    exitCode = call "test" ["-t", "0"]
    exitCode == 0

io.test_getEcho = do
    if is_a_tty () then
        prev = getEcho stdIn
        setEcho stdIn false
        checkEqual "echo turned off" (getEcho stdIn) false
        setEcho stdIn true
        checkEqual "echo turned back on" (getEcho stdIn) true
        setEcho stdIn prev
    else
        ()

io.test_getArgs = do
    checkEqual "cli args" !getArgs []

io.test_getEnv = do
    checkEqual "HOME env variable" (startsWith "/" (getEnv "HOME")) true

io.test.getRandomBytes = do
    bs = IO.randomBytes 10
    checkEqual "get 10 random bytes" 10 (base.Bytes.size bs)

io.test_getChar = do
    fp = !testFile
    _ = writeFile fp "oón"
    h = open fp Read
    checkEqual "get char" (getChar h) ?o
    checkEqual "get a complicated char" (getChar h) ?ó

io.test_getSomeBytes = do
    fp = !testFile
    _ = writeFile fp "one\ntwo\nthree"
    h = open fp Read
    one = getSomeBytes h 3
    checkEqual "get some bytes" one (toUtf8 "one")
